{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "b431844a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:4: SyntaxWarning: invalid escape sequence '\\S'\n",
      "<>:4: SyntaxWarning: invalid escape sequence '\\S'\n",
      "C:\\Users\\ds\\AppData\\Local\\Temp\\ipykernel_12960\\3421722117.py:4: SyntaxWarning: invalid escape sequence '\\S'\n",
      "  xls_file_path = 'D:\\Siyu\\Data Mining\\HW3\\新竹_2021.xls'\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "新竹_2021.csv 格式！\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# 輸入 .xls 檔案的路徑\n",
    "xls_file_path = 'D:\\Siyu\\Data Mining\\HW3\\新竹_2021.xls'\n",
    "\n",
    "# 讀取 .xls 檔案\n",
    "data = pd.read_excel(xls_file_path, engine='xlrd')\n",
    "\n",
    "# 定義輸出的 .csv 檔案路徑\n",
    "csv_file_path = '新竹_2021.csv'\n",
    "\n",
    "# 將資料儲存為 .csv 檔案\n",
    "data.to_csv(csv_file_path, index=False, encoding='utf-8')\n",
    "\n",
    "print(\"新竹_2021.csv 格式！\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "cbfe5452-9e11-48eb-af48-eef71aaa99e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: xlrd==2.0.1 in c:\\users\\ds\\anaconda3\\lib\\site-packages (2.0.1)\n",
      "Requirement already satisfied: xgboost in c:\\users\\ds\\anaconda3\\lib\\site-packages (2.1.2)\n",
      "Requirement already satisfied: numpy in c:\\users\\ds\\anaconda3\\lib\\site-packages (from xgboost) (1.26.4)\n",
      "Requirement already satisfied: scipy in c:\\users\\ds\\anaconda3\\lib\\site-packages (from xgboost) (1.13.1)\n"
     ]
    }
   ],
   "source": [
    "# Install necessary libraries\n",
    "!pip install xlrd==2.0.1\n",
    "!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "9c577d5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>測站</th>\n",
       "      <th>日期</th>\n",
       "      <th>測項</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>...</th>\n",
       "      <th>14</th>\n",
       "      <th>15</th>\n",
       "      <th>16</th>\n",
       "      <th>17</th>\n",
       "      <th>18</th>\n",
       "      <th>19</th>\n",
       "      <th>20</th>\n",
       "      <th>21</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>--------------------</td>\n",
       "      <td>--------------------</td>\n",
       "      <td>--------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>...</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "      <td>-------------------------------</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>新竹</td>\n",
       "      <td>2021-01-01 00:00:00</td>\n",
       "      <td>AMB_TEMP</td>\n",
       "      <td>11.1</td>\n",
       "      <td>11.2</td>\n",
       "      <td>11.4</td>\n",
       "      <td>11.5</td>\n",
       "      <td>11.6</td>\n",
       "      <td>11.7</td>\n",
       "      <td>11.9</td>\n",
       "      <td>...</td>\n",
       "      <td>16.6</td>\n",
       "      <td>16.3</td>\n",
       "      <td>15.6</td>\n",
       "      <td>14.8</td>\n",
       "      <td>14.4</td>\n",
       "      <td>14.5</td>\n",
       "      <td>14.7</td>\n",
       "      <td>14.7</td>\n",
       "      <td>14.6</td>\n",
       "      <td>14.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>新竹</td>\n",
       "      <td>2021-01-01 00:00:00</td>\n",
       "      <td>CH4</td>\n",
       "      <td>2.01</td>\n",
       "      <td>1.99</td>\n",
       "      <td>2</td>\n",
       "      <td>2.02</td>\n",
       "      <td>2.03</td>\n",
       "      <td>2.02</td>\n",
       "      <td>2.02</td>\n",
       "      <td>...</td>\n",
       "      <td>1.98</td>\n",
       "      <td>1.97</td>\n",
       "      <td>1.97</td>\n",
       "      <td>2</td>\n",
       "      <td>2.02</td>\n",
       "      <td>2.01</td>\n",
       "      <td>2.01</td>\n",
       "      <td>2</td>\n",
       "      <td>1.98</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>新竹</td>\n",
       "      <td>2021-01-01 00:00:00</td>\n",
       "      <td>CO</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.26</td>\n",
       "      <td>0.25</td>\n",
       "      <td>...</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.29</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>新竹</td>\n",
       "      <td>2021-01-01 00:00:00</td>\n",
       "      <td>NMHC</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.07</td>\n",
       "      <td>...</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.1</td>\n",
       "      <td>0.09</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   測站                    日期                    測項                    \\\n",
       "0  --------------------  --------------------  --------------------   \n",
       "1  新竹                     2021-01-01 00:00:00  AMB_TEMP               \n",
       "2  新竹                     2021-01-01 00:00:00  CH4                    \n",
       "3  新竹                     2021-01-01 00:00:00  CO                     \n",
       "4  新竹                     2021-01-01 00:00:00  NMHC                   \n",
       "\n",
       "                                 0                                1  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             11.1                             11.2   \n",
       "2                             2.01                             1.99   \n",
       "3                             0.31                             0.28   \n",
       "4                              0.1                              0.1   \n",
       "\n",
       "                                 2                                3  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             11.4                             11.5   \n",
       "2                                2                             2.02   \n",
       "3                             0.28                             0.33   \n",
       "4                             0.08                             0.09   \n",
       "\n",
       "                                 4                                5  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             11.6                             11.7   \n",
       "2                             2.03                             2.02   \n",
       "3                             0.32                             0.26   \n",
       "4                              0.1                             0.07   \n",
       "\n",
       "                                 6  ...                               14  \\\n",
       "0  -------------------------------  ...  -------------------------------   \n",
       "1                             11.9  ...                             16.6   \n",
       "2                             2.02  ...                             1.98   \n",
       "3                             0.25  ...                             0.31   \n",
       "4                             0.07  ...                             0.06   \n",
       "\n",
       "                                15                               16  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             16.3                             15.6   \n",
       "2                             1.97                             1.97   \n",
       "3                             0.29                             0.29   \n",
       "4                             0.07                             0.08   \n",
       "\n",
       "                                17                               18  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             14.8                             14.4   \n",
       "2                                2                             2.02   \n",
       "3                             0.33                             0.34   \n",
       "4                             0.12                             0.13   \n",
       "\n",
       "                                19                               20  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             14.5                             14.7   \n",
       "2                             2.01                             2.01   \n",
       "3                             0.34                             0.34   \n",
       "4                              0.1                              0.1   \n",
       "\n",
       "                                21                               22  \\\n",
       "0  -------------------------------  -------------------------------   \n",
       "1                             14.7                             14.6   \n",
       "2                                2                             1.98   \n",
       "3                             0.29                             0.24   \n",
       "4                             0.09                             0.05   \n",
       "\n",
       "                                23  \n",
       "0  -------------------------------  \n",
       "1                             14.4  \n",
       "2                             1.98  \n",
       "3                             0.21  \n",
       "4                             0.06  \n",
       "\n",
       "[5 rows x 27 columns]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the newly uploaded CSV file to verify its contents and proceed with the analysis\n",
    "csv_file_path = '新竹_2021.csv'\n",
    "data = pd.read_csv(csv_file_path)\n",
    "\n",
    "# Display the first few rows to understand the structure of the CSV data\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "adb75842",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ds\\AppData\\Local\\Temp\\ipykernel_12960\\3008555711.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data_filtered[col] = pd.to_numeric(data_filtered[col], errors='coerce')\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>測項</th>\n",
       "      <th>datetime</th>\n",
       "      <th>AMB_TEMP</th>\n",
       "      <th>CH4</th>\n",
       "      <th>CO</th>\n",
       "      <th>NMHC</th>\n",
       "      <th>NO</th>\n",
       "      <th>NO2</th>\n",
       "      <th>NOx</th>\n",
       "      <th>O3</th>\n",
       "      <th>PM10</th>\n",
       "      <th>PM2.5</th>\n",
       "      <th>RAINFALL</th>\n",
       "      <th>RH</th>\n",
       "      <th>SO2</th>\n",
       "      <th>THC</th>\n",
       "      <th>WD_HR</th>\n",
       "      <th>WIND_DIREC</th>\n",
       "      <th>WIND_SPEED</th>\n",
       "      <th>WS_HR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-01 00:00:00</td>\n",
       "      <td>11.1</td>\n",
       "      <td>2.01</td>\n",
       "      <td>0.31</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.5</td>\n",
       "      <td>11.9</td>\n",
       "      <td>13.5</td>\n",
       "      <td>21.6</td>\n",
       "      <td>38.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.11</td>\n",
       "      <td>38.0</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-01-01 01:00:00</td>\n",
       "      <td>11.2</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>10.4</td>\n",
       "      <td>11.9</td>\n",
       "      <td>25.1</td>\n",
       "      <td>29.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>65.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>2.09</td>\n",
       "      <td>41.0</td>\n",
       "      <td>46.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>2.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-01 02:00:00</td>\n",
       "      <td>11.4</td>\n",
       "      <td>2.00</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.08</td>\n",
       "      <td>1.4</td>\n",
       "      <td>9.8</td>\n",
       "      <td>11.2</td>\n",
       "      <td>25.6</td>\n",
       "      <td>27.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>2.08</td>\n",
       "      <td>49.0</td>\n",
       "      <td>43.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-01-01 03:00:00</td>\n",
       "      <td>11.5</td>\n",
       "      <td>2.02</td>\n",
       "      <td>0.33</td>\n",
       "      <td>0.09</td>\n",
       "      <td>1.5</td>\n",
       "      <td>12.1</td>\n",
       "      <td>13.7</td>\n",
       "      <td>22.4</td>\n",
       "      <td>24.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2.11</td>\n",
       "      <td>54.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-01-01 04:00:00</td>\n",
       "      <td>11.6</td>\n",
       "      <td>2.03</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>12.4</td>\n",
       "      <td>13.9</td>\n",
       "      <td>21.1</td>\n",
       "      <td>29.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.13</td>\n",
       "      <td>50.0</td>\n",
       "      <td>50.0</td>\n",
       "      <td>2.6</td>\n",
       "      <td>2.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "測項            datetime  AMB_TEMP              CH4                   \\\n",
       "0  2021-01-01 00:00:00                  11.1                  2.01   \n",
       "1  2021-01-01 01:00:00                  11.2                  1.99   \n",
       "2  2021-01-01 02:00:00                  11.4                  2.00   \n",
       "3  2021-01-01 03:00:00                  11.5                  2.02   \n",
       "4  2021-01-01 04:00:00                  11.6                  2.03   \n",
       "\n",
       "測項  CO                    NMHC                  NO                    \\\n",
       "0                   0.31                  0.10                   1.5   \n",
       "1                   0.28                  0.10                   1.4   \n",
       "2                   0.28                  0.08                   1.4   \n",
       "3                   0.33                  0.09                   1.5   \n",
       "4                   0.32                  0.10                   1.4   \n",
       "\n",
       "測項  NO2                   NOx                   O3                    \\\n",
       "0                   11.9                  13.5                  21.6   \n",
       "1                   10.4                  11.9                  25.1   \n",
       "2                    9.8                  11.2                  25.6   \n",
       "3                   12.1                  13.7                  22.4   \n",
       "4                   12.4                  13.9                  21.1   \n",
       "\n",
       "測項  PM10                  PM2.5                 RAINFALL              \\\n",
       "0                   38.0                  25.0                   0.0   \n",
       "1                   29.0                  24.0                   0.0   \n",
       "2                   27.0                  13.0                   0.0   \n",
       "3                   24.0                  14.0                   0.0   \n",
       "4                   29.0                  15.0                   0.0   \n",
       "\n",
       "測項  RH                    SO2                   THC                   \\\n",
       "0                   64.0                   NaN                  2.11   \n",
       "1                   65.0                   2.1                  2.09   \n",
       "2                   63.0                   2.1                  2.08   \n",
       "3                   63.0                   1.8                  2.11   \n",
       "4                   63.0                   1.1                  2.13   \n",
       "\n",
       "測項  WD_HR                 WIND_DIREC            WIND_SPEED            \\\n",
       "0                   38.0                  53.0                   3.0   \n",
       "1                   41.0                  46.0                   3.4   \n",
       "2                   49.0                  43.0                   2.7   \n",
       "3                   54.0                  54.0                   3.0   \n",
       "4                   50.0                  50.0                   2.6   \n",
       "\n",
       "測項  WS_HR                 \n",
       "0                    2.6  \n",
       "1                    2.4  \n",
       "2                    2.5  \n",
       "3                    2.5  \n",
       "4                    2.1  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filter out rows where '日期' or '測項' columns have invalid entries (non-date, non-parameter rows)\n",
    "# Keeping only rows where '日期' column contains recognizable dates\n",
    "data_filtered = data[data['日期'].str.match(r'^\\d{4}-\\d{2}-\\d{2}.*', na=False)]\n",
    "\n",
    "# Convert '數值' columns to numeric, forcing errors to NaN, to handle any non-numeric values\n",
    "for col in data_filtered.columns[3:]:\n",
    "    data_filtered[col] = pd.to_numeric(data_filtered[col], errors='coerce')\n",
    "\n",
    "# Reshape the data again after filtering\n",
    "melted_data = data_filtered.melt(id_vars=[\"測站\", \"日期\", \"測項\"], var_name=\"小時\", value_name=\"數值\")\n",
    "melted_data[\"datetime\"] = pd.to_datetime(melted_data[\"日期\"]) + pd.to_timedelta(melted_data[\"小時\"].astype(int), unit=\"h\")\n",
    "\n",
    "# Pivot the table to get each pollutant as a column with datetime as the index\n",
    "reshaped_data = melted_data.pivot_table(index=\"datetime\", columns=\"測項\", values=\"數值\", aggfunc=\"first\")\n",
    "reshaped_data.reset_index(inplace=True)\n",
    "\n",
    "# Display the first few rows to confirm the reshaping\n",
    "reshaped_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "3efc256a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_absolute_error\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "0c90bdad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['AMB_TEMP',\n",
       " 'CH4',\n",
       " 'CO',\n",
       " 'NMHC',\n",
       " 'NO',\n",
       " 'NO2',\n",
       " 'NOx',\n",
       " 'O3',\n",
       " 'PM10',\n",
       " 'PM2.5',\n",
       " 'RAINFALL',\n",
       " 'RH',\n",
       " 'SO2',\n",
       " 'THC',\n",
       " 'WD_HR',\n",
       " 'WIND_DIREC',\n",
       " 'WIND_SPEED',\n",
       " 'WS_HR']"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check and clean column names to ensure there are no extra spaces or special characters\n",
    "reshaped_data.columns = reshaped_data.columns.str.strip()\n",
    "\n",
    "# Verify column names to confirm PM2.5 is available and correctly labeled\n",
    "reshaped_data.columns.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "65bd415e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Index(['AMB_TEMP', 'CH4', 'CO', 'NMHC', 'NO', 'NO2', 'NOx', 'O3', 'PM10',\n",
       "        'PM2.5', 'RAINFALL', 'RH', 'SO2', 'THC', 'WD_HR', 'WIND_DIREC',\n",
       "        'WIND_SPEED', 'WS_HR'],\n",
       "       dtype='object', name='測項'),\n",
       " Index(['AMB_TEMP', 'CH4', 'CO', 'NMHC', 'NO', 'NO2', 'NOx', 'O3', 'PM10',\n",
       "        'PM2.5', 'RAINFALL', 'RH', 'SO2', 'THC', 'WD_HR', 'WIND_DIREC',\n",
       "        'WIND_SPEED', 'WS_HR'],\n",
       "       dtype='object', name='測項'))"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Re-run the feature and target creation with the verified \"PM2.5\" column\n",
    "\n",
    "# Using PM2.5 data to create features and targets for both 1-hour and 6-hour predictions\n",
    "X_train_1, y_train_1 = create_time_series_features(train_data[['PM2.5']], 'PM2.5', prediction_hour=1)\n",
    "X_train_6, y_train_6 = create_time_series_features(train_data[['PM2.5']], 'PM2.5', prediction_hour=6)\n",
    "\n",
    "X_test_1, y_test_1 = create_time_series_features(test_data[['PM2.5']], 'PM2.5', prediction_hour=1)\n",
    "X_test_6, y_test_6 = create_time_series_features(test_data[['PM2.5']], 'PM2.5', prediction_hour=6)\n",
    "\n",
    "# Check the columns in train_data and test_data to verify if \"PM2.5\" exists\n",
    "train_data.columns, test_data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "897436f1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Index(['AMB_TEMP', 'CH4', 'CO', 'NMHC', 'NO', 'NO2', 'NOx', 'O3', 'PM10',\n",
       "        'PM2.5', 'RAINFALL', 'RH', 'SO2', 'THC', 'WD_HR', 'WIND_DIREC',\n",
       "        'WIND_SPEED', 'WS_HR'],\n",
       "       dtype='object', name='測項'),\n",
       " Index(['AMB_TEMP', 'CH4', 'CO', 'NMHC', 'NO', 'NO2', 'NOx', 'O3', 'PM10',\n",
       "        'PM2.5', 'RAINFALL', 'RH', 'SO2', 'THC', 'WD_HR', 'WIND_DIREC',\n",
       "        'WIND_SPEED', 'WS_HR'],\n",
       "       dtype='object', name='測項'))"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Remove extra whitespace from column names in both train_data and test_data\n",
    "train_data.columns = train_data.columns.str.strip()\n",
    "test_data.columns = test_data.columns.str.strip()\n",
    "\n",
    "# Verify column names after stripping whitespace\n",
    "train_data.columns, test_data.columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "a7f3e5f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 創建時間序列特徵的函數\n",
    "def create_time_series_features(data, target_col, prediction_hour=1, use_all_features=False):\n",
    "    X, y = [], []\n",
    "    for i in range(len(data) - 6 - prediction_hour + 1):\n",
    "        if use_all_features:\n",
    "            X.append(data.iloc[i:i+6].values.flatten())  # 使用前 6 小時的所有特徵數據\n",
    "        else:\n",
    "            X.append(data[[target_col]].iloc[i:i+6].values.flatten())  # 僅使用 PM2.5\n",
    "        y.append(data.iloc[i+6+prediction_hour-1][target_col])  # 目標值\n",
    "    return np.array(X), np.array(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "4d9d5cc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 創建特徵與目標\n",
    "# 僅使用 PM2.5\n",
    "X_train_1, y_train_1 = create_time_series_features(train_data, 'PM2.5', prediction_hour=1)\n",
    "X_train_6, y_train_6 = create_time_series_features(train_data, 'PM2.5', prediction_hour=6)\n",
    "X_test_1, y_test_1 = create_time_series_features(test_data, 'PM2.5', prediction_hour=1)\n",
    "X_test_6, y_test_6 = create_time_series_features(test_data, 'PM2.5', prediction_hour=6)\n",
    "\n",
    "# 使用所有特徵\n",
    "X_train_all_1, y_train_all_1 = create_time_series_features(train_data, 'PM2.5', prediction_hour=1, use_all_features=True)\n",
    "X_train_all_6, y_train_all_6 = create_time_series_features(train_data, 'PM2.5', prediction_hour=6, use_all_features=True)\n",
    "X_test_all_1, y_test_all_1 = create_time_series_features(test_data, 'PM2.5', prediction_hour=1, use_all_features=True)\n",
    "X_test_all_6, y_test_all_6 = create_time_series_features(test_data, 'PM2.5', prediction_hour=6, use_all_features=True)\n",
    "\n",
    "# 計算 MAE 結果\n",
    "results = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "897aec6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 線性回歸\n",
    "lr = LinearRegression()\n",
    "# 僅 PM2.5\n",
    "lr.fit(X_train_1, y_train_1)\n",
    "results[\"Linear Regression (PM2.5 only, 1-hr)\"] = mean_absolute_error(y_test_1, lr.predict(X_test_1))\n",
    "lr.fit(X_train_6, y_train_6)\n",
    "results[\"Linear Regression (PM2.5 only, 6-hr)\"] = mean_absolute_error(y_test_6, lr.predict(X_test_6))\n",
    "\n",
    "# 所有特徵\n",
    "lr.fit(X_train_all_1, y_train_all_1)\n",
    "results[\"Linear Regression (all features, 1-hr)\"] = mean_absolute_error(y_test_all_1, lr.predict(X_test_all_1))\n",
    "lr.fit(X_train_all_6, y_train_all_6)\n",
    "results[\"Linear Regression (all features, 6-hr)\"] = mean_absolute_error(y_test_all_6, lr.predict(X_test_all_6))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "9700a92c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# XGBoost\n",
    "xgb = XGBRegressor(objective='reg:squarederror')\n",
    "# 僅 PM2.5\n",
    "xgb.fit(X_train_1, y_train_1)\n",
    "results[\"XGBoost (PM2.5 only, 1-hr)\"] = mean_absolute_error(y_test_1, xgb.predict(X_test_1))\n",
    "xgb.fit(X_train_6, y_train_6)\n",
    "results[\"XGBoost (PM2.5 only, 6-hr)\"] = mean_absolute_error(y_test_6, xgb.predict(X_test_6))\n",
    "\n",
    "# 所有特徵\n",
    "xgb.fit(X_train_all_1, y_train_all_1)\n",
    "results[\"XGBoost (all features, 1-hr)\"] = mean_absolute_error(y_test_all_1, xgb.predict(X_test_all_1))\n",
    "xgb.fit(X_train_all_6, y_train_all_6)\n",
    "results[\"XGBoost (all features, 6-hr)\"] = mean_absolute_error(y_test_all_6, xgb.predict(X_test_all_6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "584bc2a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression (PM2.5 only, 1-hr): MAE = 2.6784610926768067\n",
      "Linear Regression (PM2.5 only, 6-hr): MAE = 4.307013517163868\n",
      "Linear Regression (all features, 1-hr): MAE = 2.649771845807222\n",
      "Linear Regression (all features, 6-hr): MAE = 4.270629253628853\n",
      "XGBoost (PM2.5 only, 1-hr): MAE = 3.1131107543865193\n",
      "XGBoost (PM2.5 only, 6-hr): MAE = 4.972211933721462\n",
      "XGBoost (all features, 1-hr): MAE = 3.1492473252097444\n",
      "XGBoost (all features, 6-hr): MAE = 4.829627717175555\n"
     ]
    }
   ],
   "source": [
    "# 顯示結果\n",
    "for key, value in results.items():\n",
    "    print(f\"{key}: MAE = {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "1deeaa6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the plotting function for each model's MAE results\n",
    "def plot_mae_results(results):\n",
    "    labels = list(results.keys())\n",
    "    mae_values = list(results.values())\n",
    "\n",
    "    plt.figure(figsize=(12, 6))\n",
    "    plt.barh(labels, mae_values, color='skyblue')\n",
    "    plt.xlabel(\"Mean Absolute Error (MAE)\")\n",
    "    plt.title(\"MAE Results for Different Models and Feature Combinations\")\n",
    "    plt.gca().invert_yaxis()\n",
    "    plt.show()\n",
    "\n",
    "# Display the plot\n",
    "plot_mae_results(results)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
